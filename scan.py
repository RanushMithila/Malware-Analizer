import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import predict


class Watcher:
    DIRECTORY_TO_WATCH = 'D:\Scan'

    def __init__(self):
        self.observer = Observer()

    def run(self):
        event_handler = Handler()
        self.observer.schedule(
            event_handler, self.DIRECTORY_TO_WATCH, recursive=True)
        self.observer.start()
        try:
            while True:
                time.sleep(5)
        except:
            self.observer.stop()
            print("Error")

        self.observer.join()


class Handler(FileSystemEventHandler):

    @staticmethod
    def on_any_event(event):
        if event.is_directory:
            return None

        elif event.event_type == 'created':
            if event.src_path.endswith('.exe'):
                print(f"New .exe file added: {event.src_path}")
                print("Predicting...")
                time.sleep(5)
                print(predictMalware(event.src_path))


def predictMalware(filename):
    print(filename)
    software_path = filename

    # Extract features from the software file
    extracted_features = predict.extract_features(software_path)
    print(extracted_features)

    if extracted_features is not None:
        # Preprocess the 'BaseOfData' feature to handle 'inf' values
        extracted_features = [predict.sys.float_info.max if x ==
                              float('inf') else x for x in extracted_features]

        # Make a prediction using the loaded model
        prediction = predict.loaded_classifier.predict([extracted_features])

        # Interpret the prediction
        message = ""
        if prediction[0] == 1:
            message = "The software is predicted to be legitimate."
        else:
            message = "The software is predicted to be malicious."
    else:
        # Feature extraction failed
        print("Feature extraction failed.")

    return message


if __name__ == '__main__':
    w = Watcher()
    w.run()
